#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤ –¥–ª—è InBack.ru
–ê–≤—Ç–æ—Ä: InBack.ru Team
"""

import os
import sys
import pandas as pd
import json
from datetime import datetime
import logging
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class DataImporter:
    def __init__(self, database_url=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        self.database_url = database_url or os.environ.get('DATABASE_URL')
        if not self.database_url:
            raise ValueError("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        self.engine = create_engine(self.database_url)
        Session = sessionmaker(bind=self.engine)
        self.session = Session()
        
    def import_excel_properties(self, excel_file_path):
        """–ò–º–ø–æ—Ä—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        logger.info(f"üè† –ò–º–ø–æ—Ä—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–∑ {excel_file_path}")
        
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(excel_file_path)
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –≤ Excel —Ñ–∞–π–ª–µ")
            
            imported_count = 0
            for index, row in df.iterrows():
                try:
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                    property_data = {
                        'inner_id': row.get('id', f'import_{index}'),
                        'complex_name': row.get('complex_name', ''),
                        'developer_name': row.get('developer_name', ''),
                        'object_rooms': int(row.get('rooms', 0)) if pd.notna(row.get('rooms')) else 0,
                        'object_area': float(row.get('area', 0)) if pd.notna(row.get('area')) else 0,
                        'price': int(row.get('price', 0)) if pd.notna(row.get('price')) else 0,
                        'object_min_floor': int(row.get('floor', 1)) if pd.notna(row.get('floor')) else 1,
                        'object_max_floor': int(row.get('floor', 1)) if pd.notna(row.get('floor')) else 1,
                        'address_display_name': row.get('address', ''),
                        'address_position_lat': float(row.get('latitude')) if pd.notna(row.get('latitude')) else None,
                        'address_position_lon': float(row.get('longitude')) if pd.notna(row.get('longitude')) else None,
                        'photos': json.dumps([]) if pd.isna(row.get('photos')) else str(row.get('photos', '[]')),
                        'created_at': datetime.utcnow(),
                        'updated_at': datetime.utcnow()
                    }
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    self.session.execute(text('''
                        INSERT INTO excel_properties (
                            inner_id, complex_name, developer_name, object_rooms, 
                            object_area, price, object_min_floor, object_max_floor,
                            address_display_name, address_position_lat, address_position_lon,
                            photos, created_at, updated_at
                        ) VALUES (
                            :inner_id, :complex_name, :developer_name, :object_rooms,
                            :object_area, :price, :object_min_floor, :object_max_floor,
                            :address_display_name, :address_position_lat, :address_position_lon,
                            :photos, :created_at, :updated_at
                        ) ON CONFLICT (inner_id) DO UPDATE SET
                            complex_name = EXCLUDED.complex_name,
                            developer_name = EXCLUDED.developer_name,
                            updated_at = EXCLUDED.updated_at
                    '''), property_data)
                    
                    imported_count += 1
                    
                    # –ö–æ–º–º–∏—Ç–∏–º –∫–∞–∂–¥—ã–µ 100 –∑–∞–ø–∏—Å–µ–π
                    if imported_count % 100 == 0:
                        self.session.commit()
                        logger.info(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –æ–±—ä–µ–∫—Ç–æ–≤...")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–ø–∏—Å–∏ {index}: {e}")
                    continue
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
            self.session.commit()
            logger.info(f"üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {imported_count} –æ–±—ä–µ–∫—Ç–æ–≤")
            return imported_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Excel —Ñ–∞–π–ª–∞: {e}")
            self.session.rollback()
            return 0
    
    def import_developers(self, excel_file_path):
        """–ò–º–ø–æ—Ä—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        logger.info(f"üèóÔ∏è –ò–º–ø–æ—Ä—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –∏–∑ {excel_file_path}")
        
        try:
            df = pd.read_excel(excel_file_path)
            imported_count = 0
            
            for index, row in df.iterrows():
                try:
                    developer_data = {
                        'name': row.get('name', f'–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫ {index}'),
                        'slug': self.create_slug(row.get('name', f'zastroishik-{index}')),
                        'full_name': row.get('full_name', ''),
                        'description': row.get('description', ''),
                        'phone': row.get('phone', ''),
                        'email': row.get('email', ''),
                        'website': row.get('website', ''),
                        'is_active': True,
                        'created_at': datetime.utcnow(),
                        'updated_at': datetime.utcnow()
                    }
                    
                    self.session.execute(text('''
                        INSERT INTO developers (
                            name, slug, full_name, description, phone, email, website,
                            is_active, created_at, updated_at
                        ) VALUES (
                            :name, :slug, :full_name, :description, :phone, :email, :website,
                            :is_active, :created_at, :updated_at
                        ) ON CONFLICT (name) DO UPDATE SET
                            full_name = EXCLUDED.full_name,
                            updated_at = EXCLUDED.updated_at
                    '''), developer_data)
                    
                    imported_count += 1
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ {index}: {e}")
                    continue
            
            self.session.commit()
            logger.info(f"üéâ –ò–º–ø–æ—Ä—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {imported_count} –∑–∞–ø–∏—Å–µ–π")
            return imported_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤: {e}")
            self.session.rollback()
            return 0
    
    def create_slug(self, name):
        """–°–æ–∑–¥–∞–Ω–∏–µ slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"""
        import re
        import unicodedata
        
        # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
        translit_map = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
            '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
        }
        
        slug = str(name).lower()
        for cyrillic, latin in translit_map.items():
            slug = slug.replace(cyrillic, latin)
        
        slug = re.sub(r'[^\w\s-]', '', slug)
        slug = re.sub(r'[-\s]+', '-', slug)
        return slug.strip('-')
    
    def auto_import_excel_files(self, attachments_dir="../PROJECT_FILES/attached_assets"):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö Excel —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏"""
        logger.info(f"üìÅ –ü–æ–∏—Å–∫ Excel —Ñ–∞–π–ª–æ–≤ –≤ {attachments_dir}")
        
        if not os.path.exists(attachments_dir):
            logger.error(f"‚ùå –ü–∞–ø–∫–∞ {attachments_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        excel_files = []
        for file in os.listdir(attachments_dir):
            if file.endswith(('.xlsx', '.xls')) and not file.startswith('~'):
                excel_files.append(os.path.join(attachments_dir, file))
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(excel_files)} Excel —Ñ–∞–π–ª–æ–≤")
        
        total_imported = 0
        for excel_file in excel_files[:5]:  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
            logger.info(f"üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {os.path.basename(excel_file)}")
            
            if 'properties' in excel_file.lower() or 'excel_properties' in excel_file.lower():
                count = self.import_excel_properties(excel_file)
            elif 'developers' in excel_file.lower():
                count = self.import_developers(excel_file)
            else:
                # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ properties –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                count = self.import_excel_properties(excel_file)
            
            total_imported += count
        
        logger.info(f"üéâ –ê–≤—Ç–æ–∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {total_imported} –∑–∞–ø–∏—Å–µ–π")
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.session.close()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö InBack.ru...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–º–ø–æ—Ä—Ç–µ—Ä
        importer = DataImporter()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç Excel —Ñ–∞–π–ª–æ–≤
        importer.auto_import_excel_files()
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        if 'importer' in locals():
            importer.close()

if __name__ == "__main__":
    main()