#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ InBack.ru
–ê–≤—Ç–æ—Ä: InBack.ru Team
"""

import os
import sys
import logging
import requests
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
import importlib.util

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class InstallationVerifier:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
        self.errors = []
        self.warnings = []
        self.success_count = 0
        self.total_checks = 0
    
    def check_result(self, name, condition, error_msg="", warning_msg=""):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        self.total_checks += 1
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {name}", end=" ... ")
        
        if condition:
            print("‚úÖ –û–ö")
            self.success_count += 1
        else:
            if error_msg:
                print(f"‚ùå –û–®–ò–ë–ö–ê: {error_msg}")
                self.errors.append(f"{name}: {error_msg}")
            elif warning_msg:
                print(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {warning_msg}")
                self.warnings.append(f"{name}: {warning_msg}")
            else:
                print("‚ùå –ù–ï–£–î–ê–ß–ê")
                self.errors.append(name)
    
    def check_environment_variables(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        required_vars = {
            'DATABASE_URL': '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
            'SESSION_SECRET': '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π'
        }
        
        optional_vars = {
            'SENDGRID_API_KEY': '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
            'TELEGRAM_BOT_TOKEN': '–î–ª—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
            'OPENAI_API_KEY': '–î–ª—è –ò–ò —Ñ—É–Ω–∫—Ü–∏–π'
        }
        
        for var, description in required_vars.items():
            value = os.environ.get(var)
            self.check_result(
                f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var}",
                value is not None and value.strip() != "",
                f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. {description}"
            )
        
        for var, description in optional_vars.items():
            value = os.environ.get(var)
            self.check_result(
                f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                True,  # –í—Å–µ–≥–¥–∞ —É—Å–ø–µ—Ö –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö
                warning_msg="" if value else f"–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. {description}"
            )
    
    def check_database_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        database_url = os.environ.get('DATABASE_URL')
        if not database_url:
            self.check_result(
                "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                False,
                "DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            )
            return
        
        try:
            engine = create_engine(database_url)
            Session = sessionmaker(bind=engine)
            session = Session()
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            result = session.execute(text("SELECT 1"))
            session.close()
            
            self.check_result("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", True)
            
        except Exception as e:
            self.check_result(
                "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                False,
                f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
            )
    
    def check_database_tables(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        database_url = os.environ.get('DATABASE_URL')
        if not database_url:
            return
        
        required_tables = [
            'users', 'properties', 'excel_properties', 'developers',
            'residential_complexes', 'managers', 'districts'
        ]
        
        try:
            engine = create_engine(database_url)
            Session = sessionmaker(bind=engine)
            session = Session()
            
            for table in required_tables:
                try:
                    result = session.execute(text(f"SELECT COUNT(*) FROM {table}"))
                    count = result.scalar()
                    self.check_result(
                        f"–¢–∞–±–ª–∏—Ü–∞ {table}",
                        True,
                        warning_msg="" if count > 0 else f"–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ (0 –∑–∞–ø–∏—Å–µ–π)"
                    )
                except Exception as e:
                    self.check_result(
                        f"–¢–∞–±–ª–∏—Ü–∞ {table}",
                        False,
                        f"–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {str(e)}"
                    )
            
            session.close()
            
        except Exception as e:
            self.check_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î",
                False,
                f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            )
    
    def check_python_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        required_packages = [
            'flask', 'sqlalchemy', 'psycopg2', 'pandas', 
            'openpyxl', 'requests', 'gunicorn'
        ]
        
        for package in required_packages:
            try:
                __import__(package)
                self.check_result(f"–ü–∞–∫–µ—Ç {package}", True)
            except ImportError:
                self.check_result(
                    f"–ü–∞–∫–µ—Ç {package}",
                    False,
                    f"–ü–∞–∫–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install {package}"
                )
    
    def check_project_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        logger.info("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...")
        
        required_files = [
            '../PROJECT_FILES/app.py',
            '../PROJECT_FILES/models.py', 
            '../PROJECT_FILES/main.py',
            '../PROJECT_FILES/requirements.txt'
        ]
        
        required_dirs = [
            '../PROJECT_FILES/templates',
            '../PROJECT_FILES/static',
            '../PROJECT_FILES/attached_assets'
        ]
        
        for file_path in required_files:
            self.check_result(
                f"–§–∞–π–ª {os.path.basename(file_path)}",
                os.path.isfile(file_path),
                f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
            )
        
        for dir_path in required_dirs:
            self.check_result(
                f"–ü–∞–ø–∫–∞ {os.path.basename(dir_path)}",
                os.path.isdir(dir_path),
                f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {dir_path}"
            )
    
    def check_flask_app(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        logger.info("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∞ app
        sys.path.insert(0, '../PROJECT_FILES')
        try:
            import app
            self.check_result("–ò–º–ø–æ—Ä—Ç Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            flask_app = app.app
            self.check_result(
                "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Flask",
                flask_app.config.get('SQLALCHEMY_DATABASE_URI') is not None
            )
            
        except Exception as e:
            self.check_result(
                "–ò–º–ø–æ—Ä—Ç Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                False,
                f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}"
            )
    
    def check_permissions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        logger.info("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –ø–∞–ø–∫–∏
        write_dirs = [
            '../PROJECT_FILES/static/uploads',
            '../PROJECT_FILES/instance',
            '.'
        ]
        
        for dir_path in write_dirs:
            if os.path.exists(dir_path):
                try:
                    test_file = os.path.join(dir_path, 'test_write.tmp')
                    with open(test_file, 'w') as f:
                        f.write('test')
                    os.remove(test_file)
                    self.check_result(f"–ó–∞–ø–∏—Å—å –≤ {dir_path}", True)
                except Exception as e:
                    self.check_result(
                        f"–ó–∞–ø–∏—Å—å –≤ {dir_path}",
                        False,
                        f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å: {str(e)}"
                    )
    
    def run_all_checks(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ InBack.ru...")
        print("=" * 60)
        
        self.check_environment_variables()
        print()
        
        self.check_python_dependencies()
        print()
        
        self.check_project_files()
        print()
        
        self.check_permissions()
        print()
        
        self.check_database_connection()
        print()
        
        self.check_database_tables()
        print()
        
        self.check_flask_app()
        print()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {self.success_count}/{self.total_checks}")
        
        if self.errors:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: {len(self.errors)}")
            for error in self.errors:
                print(f"   ‚Ä¢ {error}")
        
        if self.warnings:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(self.warnings)}")
            for warning in self.warnings:
                print(f"   ‚Ä¢ {warning}")
        
        print("=" * 60)
        
        if not self.errors:
            print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("   –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É!")
            print("")
            print("üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
            print("   cd ../PROJECT_FILES")
            print("   gunicorn --bind 0.0.0.0:5000 --reuse-port --reload main:app")
            return True
        else:
            print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò!")
            print("   –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
            print("   –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–º. –≤ FULL_RESTORE_INSTRUCTIONS.md")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    verifier = InstallationVerifier()
    success = verifier.run_all_checks()
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()